{
  "name": "API Starter Package",
  "tagline": "Allowing you to get stuff done just a little bit quicker",
  "body": "#API STARTER PACKAGE\r\n[![Build Status](https://travis-ci.org/ralphowino/restful-api-helper.svg?branch=master)](https://travis-ci.org/ralphowino/restful-api-helper)\r\n\r\n\r\nThis is a laravel package that helps you start of building a laravel API. It contains useful command generators to generate various files for your API and is completely configurable. The generators include:\r\n* `starter:init`\r\n* `starter:model <name> --fillable[=FILLABLE] --migration --relationships[=RELATIONSHIPS] --repository  --schema[=SCHEMA] --soft-deletes --table[=TABLE] --transformer`\r\n* `starter:migration <name> --schema[=SCHEMA] --soft-deletes --model[=MODEL]`\r\n* `starter:controller <name> --automate --except[=EXCEPT] --only[=ONLY] --plain --repository[=REPOSITORY] --resource --transformer[=TRANSFORMER]` \r\n* `starter:repository <name> --model`\r\n* `starter:transformer <name> --fields[=FIELDS] --includes[=INCLUDES] --model[=MODEL]`\r\n \r\n\r\n##Installation\r\n\r\n###Step 1: Install the composer packages\r\n\r\nAdd\r\n```json\r\n{\r\n   \"minimum-stability\" : \"dev\",\r\n   \"prefer-stable\" : true\r\n}\r\n```\r\nto your composer.json file.\r\n\r\nRun in terminal\r\n \r\n    composer require ralphowino/restful-api-helper 1.0.x-dev.\r\n\r\n###Step 2: Add the Service Provider\r\n\r\nAdd the service provider in `config/app.php`:  \r\n\r\n    Ralphowino\\ApiStarter\\ApiStarterServiceProvider::class\r\n\r\n###Step 3: Publish the packages configuration files\r\n\r\nPublish the package's assets by running \r\n\r\n    php artisan vendor:publish --provider=\"Ralphowino\\ApiStarter\\ApiStarterServiceProvider\"\r\n\r\n###Step 4: Initialize the package\r\n\r\nInitialize the project by running \r\n\r\n    php artisan starter:init\r\n\r\nSelect directories to save the generated files in.\r\n\r\n*NB: Just press enter for every question to retain the default.*\r\n\r\n###Step 5: Generate a new jwt token\r\n\r\nGenerate a new jwt token for the application by running \r\n\r\n    php artisan jwt:generate\r\n\r\n##Installation\r\n###Commands\r\n####1. starter:init\r\n#####Description\r\nThis command is used to setup the basic configurations for the package and import the starter files into your application.\r\nGuides you on setting up the basic structure for the application's folders and places to which to generate the files. It also sets up authentication for the API straight out of the box.\r\n#####Arguments\r\n*No arguments for this command*\r\n#####Options\r\n*This command has no options for it's execution*\r\n\r\n####2. starter:model\r\n#####Description\r\nThis command allows you to create a model for the API it will automatically extend the Base Model that comes with the package, this is however configurable from the starter.php config file and saves the model to the set out path in the starter.php config file.\r\n#####Arguments\r\n* `name` - The name of the model class (*Preferred to be singular*)\r\n\r\n#####Options\r\n* `--fillable` -  This option specifies the fillable fields for the model\r\n* `--migration` - This option generates a migration along with the model being created\r\n* `--relationships` - This option allows you to specify the relationships for the model\r\n* `--repository' - This option allows you to specify and create an accompanying repository for the model\r\n* `--schema` - This option sets the fields for the model and if a migration is to be created adds the fields to the migration, if no fillable fields have been define the fields are all added to the fillable array\r\n* `--soft-deletes` - This option allows you to add soft delete functionality to the model being created\r\n* `--table` - This option is used to explicitly set the table name for the model\r\n* `--transformer` - This option allows you to specify and create an accompanying transformer for the model\r\n\r\n#####Example\r\n\r\n    php artisan starter:model Task --schema=\"title:string, description:text\" --fillable=\"title,description\" --table=\"tasks\" --relationships=\"user:belongsTo, subtask:hasMany\" --soft-deletes\r\n\r\nThe appropriate format for the fillable fields is:\r\n\r\n`FIELD,FIELD` \r\n\r\nThe appropriate format for the relationships is:\r\n\r\n`MODEL:RELATIONSHIP`\r\n\r\nThe appropriate format for the schema is:\r\n\r\n`COLUMN_NAME:COLUMN_VALUE`\r\n\r\n..the model created will be:\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Data\\Models;\r\n\r\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\r\n\r\nuse Ralphowino\\ApiStarter\\Resources\\BaseModel; \r\n\r\nclass Task extends BaseModel\r\n{\r\n    use SoftDeletes;\r\n    /**\r\n     * The model's table\r\n     *\r\n     * @var string\r\n     */\r\n    protected $table = 'tasks';\r\n\r\n    /**\r\n     * This are the mass assignable fields for the model\r\n     *\r\n     * @var array\r\n     */\r\n    protected $fillable = ['title', 'description'];\r\n    \r\n    /**\r\n     * Links to it's user\r\n     *\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo\r\n     */\r\n     public function user()\r\n     {\r\n        return $this->belongsTo(User::class);\r\n     }\r\n\r\n    /**\r\n     * Links to it's subtask\r\n     *\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasMany\r\n     */\r\n     public function subtask()\r\n     {\r\n        return $this->hasMany(Subtask::class);\r\n     }\r\n}\r\n```\r\n\r\n####3. starter:migration\r\nThis command creates a new migration for the application\r\n\r\n#####Arguments\r\n* `name` -  The name of the migration\r\n\r\n#####Options\r\n* `--schema`  - This option adds the fields for the migration\r\n* `--model`   - This option creates a model along with the migration\r\n* `--soft-deletes` - This option adds soft deletes to the migration\r\n\r\n#####Example\r\n\r\n    php artisan starter:migration create_tasks_table --schema=\"title:string, description:text\" --soft-deletes\r\n\r\nThe schema format remains the same as that of the model command\r\n\r\n...the file generated with the command:\r\n\r\n```php\r\n<?php\r\n\r\nuse Illuminate\\Database\\Schema\\Blueprint;\r\nuse Illuminate\\Database\\Migrations\\Migration;\r\n\r\nclass CreateTasksTable extends Migration\r\n{\r\n    /**\r\n     * Run the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function up()\r\n    {\r\n        Schema::create('tasks', function (Blueprint $table) {\r\n            $table->increments('id');\r\n            $table->string('title');\r\n            $table->text('description');\r\n            $table->softDeletes();\r\n            $table->timestamps();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reverse the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function down()\r\n    {\r\n        Schema::drop('tasks');\r\n    }\r\n}\r\n```\r\n\r\n####4. starter:controller\r\nThis command creates a controller for the application and extends the BaseController automatically and is saved in the specified folder in the config file although all this (Class to extend and place to save the controller) is fully configurable in the config file.\r\n\r\n#####Arguments\r\n* `name` - The name of the controller\r\n\r\n#####Options\r\n* `--plain` - This option does not include the resourceful trait in the controller\r\n* `--resource` - This option creates a controller with all the resourceful methods\r\n* `--automate` - This option creates all the described classes for the controller e.g. The accompanying repository and transformer\r\n* `--repository` - This defines the repository for the controller\r\n* `--transformer` - This defines the transformer for the controller\r\n* `--only` - This option describes the methods to have in the controller\r\n* `--except` - This option defines the methods to exclude from the controller's methods\r\n\r\n#####Example\r\n\r\n    php artisan starter:controller TasksController --only=\"index,show\"\r\n\r\n...the controller generated by the above command:\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Http\\Controllers\\Api;\r\n\r\nuse Dingo\\Api\\Http\\Response;\r\nuse Illuminate\\Http\\Request;\r\n\r\nuse App\\Data\\Repositories\\TasksRepository;\r\nuse App\\Http\\Transformers\\TasksTransformer;\r\nuse App\\Http\\Requests;\r\nuse Ralphowino\\ApiStarter\\Resources\\BaseController; \r\n\r\nclass TasksController extends BaseController\r\n{\r\n    /**\r\n     * The repository variable\r\n     *\r\n     * @var TasksRepository\r\n     */\r\n    protected $repository;\r\n\r\n    /**\r\n     * The transformer variable\r\n     *\r\n     * @var TasksTransformer\r\n     */\r\n    protected $transformer;\r\n\r\n    /**\r\n     * The constructor for the controller\r\n     *\r\n     * @param TasksRepository $tasksRepository\r\n     * @param TasksTransformer $tasksTransformer\r\n     * TasksTransformer are used to convert model to json, with fields we would like to show.\r\n     * TasksRepository contains all logic used to manipulate the database you can override this with\r\n     * repository class you wish to have.\r\n     */\r\n    public function __construct(TasksRepository $tasksRepository, TasksTransformer $tasksTransformer)\r\n    {\r\n        $this->repository = $tasksRepository;\r\n        $this->transformer = $tasksTransformer;\r\n    }\r\n\r\n    /**\r\n     * Display a listing of the resource.\r\n     *\r\n     * @param Request $request\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    public function index(Request $request)\r\n    {\r\n        $archived = $request->input('archived', false);\r\n        $collection = $this->repository->getPaginated($request->get('per_page', 10), $archived);\r\n        return $this->response()->paginator($collection, $this->transformer);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Display the specified resource.\r\n     *\r\n     * @param  int  $id\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    public function show($id)\r\n    {\r\n        $item = $this->repository->getByKey($id);\r\n        return $this->response()->item($item, $this->transformer);\r\n    }\r\n    \r\n    \r\n}\r\n```\r\n\r\n####5. starter:repository\r\nThis command creates a repository for the application in the configured path in the configuration file.\r\n\r\n#####Arguments\r\n* `name` - The name of the model\r\n\r\n#####Options\r\n* `--model` - This option creates the model linked to the repository as it creates the repository\r\n\r\n#####Example\r\n\r\n    php artisan starter:repository TaskRepository\r\n\r\n...the repository generated is:\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Data\\Repositories;\r\n\r\nuse App\\Data\\Models\\Task;\r\nuse Ralphowino\\ApiStarter\\Resources\\ResourcefulRepositoryTrait;\r\nuse Ralphowino\\ApiStarter\\Resources\\BaseRepository; \r\n\r\nclass TaskRepository extends BaseRepository\r\n{\r\n    use ResourcefulRepositoryTrait;\r\n\r\n    /**\r\n     * This is the repository's model\r\n     *\r\n     * @var Task\r\n     */\r\n    protected $model;\r\n\r\n    /**\r\n     * TaskRepository constructor\r\n\r\n     * @param Task $task\r\n     */\r\n    function __construct(Task $task)\r\n    {\r\n        $this->model = $task;\r\n    }\r\n}\r\n```\r\n\r\n####6. starter:transformer\r\nThis command creates a transformer for the application, the transformer is saved in the specified path in the configuration file.\r\n\r\n#####Arguments\r\n* `name` - The name of the model linked to the transformer\r\n\r\n#####Options\r\n* `--fields` - The fields to be included in the transformer\r\n* `--includes` - This are the includes for the transformer\r\n* `--model` - This option the defines the model for the transformer\r\n\r\n#####Example\r\n\r\n    php artisan starter:transformer TaskTransformer --fields=\"name,slug\" --includes=\"user:item, comments:collection, goal, elements\"\r\n\r\nFor the fields format a comma seperated list is expected\r\n\r\n`name,user,time`\r\n\r\nFor the includes the following format should be used\r\n\r\n`INCLUDE_NAME:INCLUDE_TYPE`\r\n\r\nif you do not include the `INCLUDE_TYPE` the generator will try to determine if the word is plural or singular and change the type according with that\r\n\r\n...transformer generated by the command is:\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Data\\Transformers;\r\n\r\nuse App\\Data\\Models\\Task;\r\nuse League\\Fractal\\TransformerAbstract;\r\n\r\nclass TaskTransformer extends TransformerAbstract\r\n{\r\n    /**\r\n     * List of resources possible to include\r\n     *\r\n     * @var array\r\n     */\r\n    protected $availableIncludes = ['user','comments','goal','elements'];\r\n\r\n    /**\r\n     * Turn this item object into a generic array\r\n     *\r\n     * @param Task $task\r\n     * @return array\r\n     */\r\n    public function transform(Task $task)\r\n    {\r\n        return [\r\n            'id' => $task->id,\r\n            'name' => $task->name,\r\n            'slug' => $task->slug,\r\n            'created_at' => (String)$task->created_at,\r\n            'updated_at' => (String)$task->updated_at\r\n        ];\r\n    }\r\n    \r\n    /**\r\n     * Include User\r\n     *\r\n     * @param Task $task\r\n     * @return \\League\\Fractal\\Resource\\item\r\n     */\r\n    public function includeUser(Task $task)\r\n    {\r\n        $user = $task->user;\r\n        return $this->item($user, new UserTransformer());\r\n    }\r\n\r\n    /**\r\n     * Include Comments\r\n     *\r\n     * @param Task $task\r\n     * @return \\League\\Fractal\\Resource\\collection\r\n     */\r\n    public function includeComments(Task $task)\r\n    {\r\n        $comments = $task->comments;\r\n        return $this->collection($comments, new CommentTransformer());\r\n    }\r\n\r\n    /**\r\n     * Include Goal\r\n     *\r\n     * @param Task $task\r\n     * @return \\League\\Fractal\\Resource\\item\r\n     */\r\n    public function includeGoal(Task $task)\r\n    {\r\n        $goal = $task->goal;\r\n        return $this->item($goal, new GoalTransformer());\r\n    }\r\n\r\n    /**\r\n     * Include Elements\r\n     *\r\n     * @param Task $task\r\n     * @return \\League\\Fractal\\Resource\\collection\r\n     */\r\n    public function includeElements(Task $task)\r\n    {\r\n        $elements = $task->elements;\r\n        return $this->collection($elements, new ElementTransformer());\r\n    }\r\n}\r\n```\r\n####6. starter:resource\r\nThis command creates for you a resource; this contains a model, migration, repository, transformer, controller; for you application from the single resource name, you however have various options of modifying what will be generated.\r\n\r\n#####Arguments\r\n* `name` - The name of the resource\r\n\r\n#####Options\r\n* `--controller` - This option allows you to define the controller for the resource\r\n* `--except` - This option allows you to define the methods to except from the generated controller\r\n* `--fields` - This option allows you to define the fields for the transformer\r\n* `--includes` - This option allows you to define the models to include in the resource's transformer\r\n* * `--model` - This option the defines the model for the transformer\r\n* `--only` - This option allows you to define the methods for the generated controller\r\n* `--relationships` - This option allows you to define the relationships for the resource's model\r\n* `--repository` - This option allows you to define the repository for the resource\r\n* `--schema` - This option enables you to specify the schema for the resource\r\n* `--soft-deletes` - This option adds soft-delete to the resource\r\n* `--table` - This option allows you to define the table's name for this resource\r\n* `--transformer` - This option allows you to define the transformer for the resource\r\n\r\nThis command is used to do each of the other commands as unit; which in this case is termed as a 'resource'; so the output is the same as the other commands individually. It is just to let you generate a resource in one quick sweep. :-)\r\n\r\n##Configuration\r\nYou can configure the destinations of the files generated by configuring the paths to the various files in the `config/starter.php` configuration file\r\n\r\n...the default config file \r\n\r\n```php\r\n<?php\r\n\r\nreturn [\r\n    /*\r\n     * The migration configuration settings.\r\n     *\r\n     * 1. Path - path to where the created migrations are stored\r\n     */\r\n    'migration' => [\r\n        'path' => 'database\\\\migrations'\r\n    ],\r\n\r\n    /*\r\n     * The model configuration settings\r\n     *\r\n     * 1. Path - path the models will be saved in.\r\n     * 2. Extends -  The class all the created models will extend.\r\n     */\r\n    'model' => [\r\n        'path' => 'Data\\\\Models',\r\n        'extends' => 'Ralphowino\\\\ApiStarter\\\\Resources\\\\BaseModel'\r\n\r\n    ],\r\n\r\n    /*\r\n     * The controller configuration settings\r\n     *\r\n     * 1. Path - path the controllers will be saved in.\r\n     * 2. Extends - The class the created controller extends\r\n     */\r\n    'controller' => [\r\n        'path' => 'Http\\\\Controllers\\\\Api',\r\n        'extends' => 'Ralphowino\\\\ApiStarter\\\\Resources\\\\BaseController'\r\n    ],\r\n\r\n    /*\r\n     * The repository configuration settings\r\n     *\r\n     * 1. Traits configuration settings\r\n     *     1.1. Path - the path the repository traits will be saved in.\r\n     * 2. Path - the path created repositories will be saved in.\r\n     * 3. Extends - the class all created repositories will extend.\r\n     */\r\n    'repository' => [\r\n        'trait' => [\r\n            'path' => 'Data\\\\Repositories\\\\Traits'\r\n        ],\r\n        'path' => 'Data\\\\Repositories',\r\n        'extends' => 'Ralphowino\\\\ApiStarter\\\\Resources\\\\BaseRepository'\r\n    ],\r\n\r\n    /*\r\n     * The transformer configuration settings\r\n     *\r\n     * 1. Path - the path the created transformers will be saved in.\r\n     */\r\n    'transformer' => [\r\n        'path' => 'Http\\\\Transformers'\r\n    ],\r\n\r\n    /*\r\n     * The routes configuration settings\r\n     *\r\n     * 1. Path - the path the routes file is located.\r\n     */\r\n    'routes' => [\r\n        'path' => 'Http'\r\n    ],\r\n\r\n    /*\r\n     * The default classes for the application\r\n     *\r\n     * 1. Repository - the default repository for the controllers\r\n     */\r\n    'default' => [\r\n        'repository' => 'UsersRepository',\r\n        'transformer' => 'UsersTransformer'\r\n    ]\r\n];\r\n```\r\n\r\nStar our repository if this if you like this package. Share you views on the package to help us improve on it. \r\n\r\n> Written with [StackEdit](https://stackedit.io/).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}